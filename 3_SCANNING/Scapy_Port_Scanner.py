import socket, sys, time, queue, threading, requests
from scapy.all import *
from scapy.layers.inet import IP, TCP

usage = "python3 port_scanner.py TARGET START_PORT END_PORT THREADS"

print("*"*50)
print("Python Simple Port Scanner")
print("*"*50)

target = sys.argv[1]
start_port = int(sys.argv[2])
end_port = int(sys.argv[3])
thread_no = int(sys.argv[4])

result = "[+] Result:\nPORT\tSTATE\n"

try:
    target = socket.gethostbyname(target)
except:
    print("[-] Host Resolution Failed :(")
    exit()


print("[+] Scanning target: {}".format(target))


if not target or not str(start_port) or not end_port or not thread_no:
    print(usage)
    exit()


#Socket connection



def scan_port(t_no):
    global result
    while not q.empty():
        port = q.get()
        print("[+] Scanning for port {}...".format(port))
        conf.verb = 0 #makes the verbosity level is 0
        try:

            synprobe = sr1(IP(dst = target)/TCP(sport = RandShort(), dport = port, flags = 'S'))
            respflags = synprobe.getlayer(TCP).flags
            if respflags == 0x12:
                result += f"{port}\tOPEN\n"


        except Exception as e:
            print(e)


        #To make it STEALTH
        rstprobe = IP(dst=target) / TCP(sport=RandShort(), dport=port, flags='R')
        send(rstprobe)
        q.task_done()



start_time = time.time()


q = queue.Queue()


for j in range(start_port, end_port+1):
    q.put(j)


for i in range(thread_no):
    t = threading.Thread(target = scan_port, args=(i,))
    t.start()


q.join()


end_time = time.time()
print(result)
print("Time Taken: {}".format(end_time - start_time))


with open("ports.txt", 'w') as file:
    file.write(f"Port scan results for target: {target}\n")
    file.write(result)
print("[+] Written to file ports.txt")