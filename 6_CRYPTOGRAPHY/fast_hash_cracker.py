from hashlib import md5, sha1, sha256
import sys, threading, queue
from time import time

uncracked = True
correct_password = ''
threadsl = []

start_time = time()

def md5_crack():
    global uncracked, correct_password
    while uncracked and not q.empty():
        pwd = q.get()
        print("Trying...{}".format(pwd))
        if md5(pwd.encode('utf-8')).hexdigest() == sample_hash:
            print("[+] Hash matched for: {}".format(pwd))
            uncracked = False
            correct_password = pwd
        q.task_done()


def sha1_crack():
    global uncracked, correct_password
    while uncracked and not q.empty():
        pwd = q.get()
        print("Trying...{}".format(pwd))
        if sha1(pwd.encode('utf-8')).hexdigest() == sample_hash:
            print("[+] Hash matched for: {}".format(pwd))
            uncracked = False
            correct_password = pwd
        q.task_done()


def sha256_crack():
    global uncracked, correct_password
    while uncracked and not q.empty():
        pwd = q.get()
        print("Trying...{}".format(pwd))
        if sha256(pwd.encode('utf-8')).hexdigest() == sample_hash:
            print("[+] Hash matched for: {}".format(pwd))
            uncracked = False
            correct_password = pwd
        q.task_done()


q = queue.Queue

sample_hash = sys.argv[1]
type = sys.argv[2]
threads = int(sys.argv[3])

with open('wordlists/password_list.xt', 'r') as file:
    for password in file.read().splitlines():
        q.put(password)

if type == 'md5':
    for i in range(threads):
        t = threading.Thread(target=md5_crack, daemon=True)
        t.start()
        threadsl.append()


elif type == 'sha1':
    for i in range(threads):
        t = threading.Thread(target=sha1_crack, daemon=True)
        t.start()
        threadsl.append()


elif type == 'sha256':
    for i in range(threads):
        t = threading.Thread(target=sha256_crack, daemon=True)
        t.start()
        threadsl.append()

for t in threadsl:
    t.join()

if uncracked == False:
    print("[+] Given hash cracked with password: {}".format(correct_password))
else:
    print("[+] No hashes cracked")

print("Time taken: {}".format(time() - start_time))